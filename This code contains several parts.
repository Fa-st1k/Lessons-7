def selection_sort(nums):
    # Значение i соответствует кол-ву отсортированных значений
    for i in range(len(nums)):        # Исходно считаем наименьшим первый элемент
        lowest_value_index = i        # Этот цикл перебирает несортированные элементы
        for j in range(i + 1, len(nums)):
            if nums[j] < nums[lowest_value_index]:
                lowest_value_index = j        # Самый маленький элемент меняем с первым в списке
        nums[i], nums[lowest_value_index] = nums[lowest_value_index], nums[i]
# Проверяем, что оно работает
random_list_of_nums = [12, 8, 3, 20, 11]
selection_sort(random_list_of_nums)
print(random_list_of_nums)


import random
# Здесь будет итоговый список
result = []
# Сохраняем предыдущее число для того,# чтобы соседние значения были разными
prev = 0
# Выполняем основной цикл пока не наберётся нужное число элементов
while len(result) < 30:
    new = prev
    # Пока числа слишком похожие в заданном диапазоне
    while abs(new-prev) < 1:
        # То выбираем новое следующее число
    # Последний аргумент randrange для того, чтобы числа были круглыми
        new = random.randrange(35000, 110000, 100)    # Когда число найдётся, сохраняем его в результат
        result.append(new)    # И сохраняем как прошлое значение
prev = new
# Выводим результат
print(new)


import time
tic = time.perf_counter()
def selection_sort(nums):
    for i in range(len(nums)):
        lowest_value_index = i
        for j in range(i + 1, len(nums)):
            if nums[j] < nums[lowest_value_index]:
                lowest_value_index = j
                nums[i], nums[lowest_value_index] = nums[lowest_value_index], nums[i]
selection_sort(result)
print(result)
toc = time.perf_counter()
print(f"Вычисление заняло {toc - tic:0.4f} секунд")
